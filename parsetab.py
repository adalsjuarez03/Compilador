
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA END ID INT LBRACE LPAREN NUMERO PLUS PRINTF PROGRAM RBRACE READ RPAREN SEMICOLON STRINGprogram : PROGRAM ID LPAREN RPAREN LBRACE statements RBRACEstatements : statement\n                  | statement statementsstatement : declaration\n                 | read_statement\n                 | assign_statement\n                 | printf_statement\n                 | end_statementdeclaration : INT ID var_list SEMICOLONvar_list : COMMA ID var_list\n                | emptyread_statement : READ ID SEMICOLONassign_statement : ID ASSIGN ID PLUS ID SEMICOLONprintf_statement : PRINTF LPAREN STRING RPARENend_statement : END SEMICOLONempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,],[0,-1,]),'ID':([2,6,9,10,11,12,13,14,15,16,19,25,28,30,32,33,35,38,],[3,7,7,-4,-5,-6,-7,-8,22,23,26,-15,34,-12,36,-9,-14,-13,]),'LPAREN':([3,17,],[4,24,]),'RPAREN':([4,31,],[5,35,]),'LBRACE':([5,],[6,]),'INT':([6,9,10,11,12,13,14,25,30,33,35,38,],[15,15,-4,-5,-6,-7,-8,-15,-12,-9,-14,-13,]),'READ':([6,9,10,11,12,13,14,25,30,33,35,38,],[16,16,-4,-5,-6,-7,-8,-15,-12,-9,-14,-13,]),'PRINTF':([6,9,10,11,12,13,14,25,30,33,35,38,],[17,17,-4,-5,-6,-7,-8,-15,-12,-9,-14,-13,]),'END':([6,9,10,11,12,13,14,25,30,33,35,38,],[18,18,-4,-5,-6,-7,-8,-15,-12,-9,-14,-13,]),'ASSIGN':([7,],[19,]),'RBRACE':([8,9,10,11,12,13,14,21,25,30,33,35,38,],[20,-2,-4,-5,-6,-7,-8,-3,-15,-12,-9,-14,-13,]),'SEMICOLON':([18,22,23,27,29,34,36,37,],[25,-16,30,33,-11,-16,38,-10,]),'COMMA':([22,34,],[28,28,]),'STRING':([24,],[31,]),'PLUS':([26,],[32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([6,9,],[8,21,]),'statement':([6,9,],[9,9,]),'declaration':([6,9,],[10,10,]),'read_statement':([6,9,],[11,11,]),'assign_statement':([6,9,],[12,12,]),'printf_statement':([6,9,],[13,13,]),'end_statement':([6,9,],[14,14,]),'var_list':([22,34,],[27,37,]),'empty':([22,34,],[29,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID LPAREN RPAREN LBRACE statements RBRACE','program',7,'p_program','parser.py',21),
  ('statements -> statement','statements',1,'p_statements','parser.py',25),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',26),
  ('statement -> declaration','statement',1,'p_statement','parser.py',33),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> assign_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> printf_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> end_statement','statement',1,'p_statement','parser.py',37),
  ('declaration -> INT ID var_list SEMICOLON','declaration',4,'p_declaration','parser.py',41),
  ('var_list -> COMMA ID var_list','var_list',3,'p_var_list','parser.py',45),
  ('var_list -> empty','var_list',1,'p_var_list','parser.py',46),
  ('read_statement -> READ ID SEMICOLON','read_statement',3,'p_read_statement','parser.py',53),
  ('assign_statement -> ID ASSIGN ID PLUS ID SEMICOLON','assign_statement',6,'p_assign_statement','parser.py',57),
  ('printf_statement -> PRINTF LPAREN STRING RPAREN','printf_statement',4,'p_printf_statement','parser.py',61),
  ('end_statement -> END SEMICOLON','end_statement',2,'p_end_statement','parser.py',66),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',70),
]
